{{- if $.Values.istio.enabled -}}
{{- $root := . -}}
{{- range $skey, $svalue := $.Values.istio.canary -}}
{{- if $.Values.statefulset.enabled }}
apiVersion: apps/v1
kind: StatefulSet
{{- else }}
apiVersion: apps/v1
kind: Deployment
{{- end }}
metadata:
  name: {{ template "utcook.fullname" $root }}-{{ $svalue.name }}
  labels:
    app: {{ template "utcook.name" $root }}
    chart: {{ template "utcook.chart" $root }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
    version: {{ $svalue.image.tag }}
    canary: "true"
{{- if $.Values.labels }}
{{ toYaml $.Values.labels | indent 4 }}
{{- end }}
{{- if $.Values.deployment.annotations }}
  annotations:
{{ toYaml $.Values.deployment.annotations | indent 4 }}
{{- end }}
spec:
  replicas: {{ $svalue.replicaCount }}
  {{- if $.Values.statefulset.enabled }}
  serviceName: {{ template "utcook.servicename" $root }}-headless
  {{- end }}
  {{- if $.Values.deploymentStrategy }}
  strategy:
{{ toYaml $.Values.deploymentStrategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "utcook.name" $root }}
      release: {{ $.Release.Name }}
      version: {{ $svalue.image.tag }}
      canary: "true"
  template:
    metadata:
    {{- if $.Values.podAnnotations }}
      annotations:
{{ toYaml $.Values.podAnnotations | indent 8}}
    {{- end }}
      labels:
        app: {{ template "utcook.name" $root }}
        release: {{ $.Release.Name }}
        version: {{ $svalue.image.tag }}
        canary: "true"
    spec:
{{- include "utcook.imagePullSecrets" . | indent 6 }}
      {{- if $.Values.deployment.initContainers }}
      initContainers:
{{ toYaml $.Values.deployment.initContainers | indent 6 }}
      {{- end }}
      nodeSelector:
{{ toYaml $.Values.nodeSelector | indent 8 }}
      affinity:
{{ toYaml $.Values.affinity | indent 8 }}
      tolerations:
{{ toYaml $.Values.tolerations | indent 8 }}
      containers:
        - name: {{ $.Chart.Name }}
          image: "{{ $svalue.image.repository }}:{{ $svalue.image.tag }}"
          {{- if $.Values.global.imagePullSecrets }}
          imagePullSecrets:
            {{- range $.Values.global.imagePullSecrets }}
            - name: {{ $root }}
            {{- end }}
          {{- else }}
          imagePullPolicy: {{ $svalue.image.pullPolicy }}
          {{- end }}
          {{- if $.Values.deployment.postStart.command }}
          lifecycle:
            postStart:
              exec:
                command: {{ $.Values.postStart.command }}
          {{- end }}
          {{- if $.Values.startCommand }}
          command:
{{ toYaml $.Values.startCommand |indent 12 }}
          {{- end }}
          env:
{{ toYaml $.Values.env | indent 12 }}
          resources:
{{ toYaml $.Values.resources | indent 12 }}
          ports:
            {{- range $key, $value := $.Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.port }}
              protocol: {{ $value.protocol }}
            {{- end }}
          {{- if $.Values.healthCheck.enabled }}
          livenessProbe:
            {{- if eq $.Values.healthCheck.type "http" }}
            httpGet:
              path: {{ $.Values.healthCheck.httpPath }}
              port: {{ $.Values.healthCheck.port }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.healthCheck.port }}
            {{- end }}
            initialDelaySeconds: {{ $.Values.healthCheck.livenessInitialDelaySeconds }}
            periodSeconds: {{ $.Values.healthCheck.livenessPeriodSeconds }}
          readinessProbe:
            {{- if eq $.Values.healthCheck.type "http" }}
            httpGet:
              path: {{ $.Values.healthCheck.httpPath }}
              port: {{ $.Values.healthCheck.port }}
            {{- else }}
            tcpSocket:
              port: {{ $.Values.healthCheck.port }}
            {{- end }}
            initialDelaySeconds: {{ $.Values.healthCheck.readinessInitialDelaySeconds }}
            periodSeconds: {{ $.Values.healthCheck.readinessPeriodSeconds }}
          {{- end }}
          volumeMounts:
            {{- if $.Values.config.enabled }}
            - name: {{ template "utcook.fullname" $root }}-conf
              mountPath: {{ $.Values.config.mountPath }}
              subPath: {{ $.Values.config.subPath }}
            {{- end }}
            {{- if $.Values.secret.enabled }}
            - name: {{ template "utcook.fullname" $root }}-secret
              mountPath: {{ $.Values.secret.mountPath }}
              subPath: {{ $.Values.secret.subPath }}
              readOnly: {{ $.Values.secret.readOnly }}
            {{- end }}
{{ toYaml $.Values.persistentVolume.mountPaths | indent 12 }}
        {{- if $.Values.deployment.additionalContainers }}
{{ toYaml $.Values.deployment.additionalContainers | indent 8 }}
        {{- end }}
      volumes:
        {{- if $.Values.config.enabled }}
        - name: {{ template "utcook.fullname" $root }}-conf
          configMap:
            name: {{ template "utcook.fullname" $root }}
        {{- end }}
        {{- if $.Values.secret.enabled }}
        - name: {{ template "utcook.fullname" $root }}-secret
          secret:
            secretName: {{ template "utcook.fullname" $root }}
        {{- end }}
        {{- if $.Values.deployment.additionalVolumes }}
{{ toYaml $.Values.deployment.additionalVolumes | indent 8 }}
        {{- end }}
{{- if not $.Values.statefulset.enabled }}
          {{- if $.Values.persistentVolume.enabled }}
        - name: data-storage
          persistentVolumeClaim:
            claimName: {{ $.Values.persistentVolume.existingClaim | default (include "utcook.fullname" $root) }}
          {{- else }}
        - name: data-storage
          emptyDir: {}
          {{- end }}
{{- else }}
  {{- if $.Values.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data-storage
      labels:
        app: {{ template "utcook.name" $root }}
        chart: {{ template "utcook.chart" $root }}
        release: {{ $.Release.Name }}
        heritage: {{ $.Release.Service }}
    spec:
      accessModes:
        - {{ $.Values.persistentVolume.accessMode | quote }}
      annotations:
      {{- range $key, $value := $.Values.persistentVolume.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
      resources:
        requests:
          storage: {{ $.Values.persistentVolume.size }}
          {{- if $.Values.persistentVolume.storageClass }}
            {{- if (eq "-" $.Values.persistentVolume.storageClass) }}
      storageClassName: ""
            {{- else }}
      storageClassName: "{{ $.Values.persistentVolume.storageClass }}"
            {{- end }}
          {{- end }}
  {{- else }}
      - name: data-storage
        emptyDir: {}
  {{- end }}
{{- end }}
---
{{- end -}}
{{- end -}}
